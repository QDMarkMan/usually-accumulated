/*
 * @Author: mark 
 * @Date: 2018-05-01 15:04:03 
 * @Last Modified by: mark
 * @Last Modified time: 2018-06-28 15:30:55
 * 正则表达式专题
 */
 /**
  正则表达式表示的是一种规则。
  */
 console.log('********************正则表达式begin***************************')
 /**
  * ⭐⭐⭐⭐⭐
  * 转移字符专题
  * \d    数字    [0-9]
  * \w    数字，英文，下划线    [a-z0-9_]
  * \s    空白字符
  * 
  * \D     除了0-9       [^0-9]
  * \W                  [^a-z0-9_]
  * \S     非空白字符
  */
 /**
  * ⭐⭐⭐⭐⭐
  * 常用量词
  * {n}   正好出现n次   /\d{8}/
  * {n,m} 最少n次最多m次  
  * {n,}  最少n次       /(0\d{2,3}-)?[1-9]\d{7}/
  *  
  * +  +号就相当于：{1,}
  * ?  ？相当于{0,1}0到1次（可有可无）
  * *  *相当于任意次 {0,}
  */
 /**
  * ⭐⭐⭐⭐⭐
  * 正则写法
  */
 //正则有两中写法 
 //1：第一种写法 JS风格
 /**
  * Reg(flag(正则表达式的文本),pattern(我自己称他为匹配模式：可传可不传)
  * pattern:如果指定，可以是以下任意值的组合
  * g：全局匹配，查找到所有的匹配，而不是在第一个匹配之后停止
  * i：忽略大小写
  * m：多行见开始(^)和结束($)视为在多行上工作（也就是分别匹配没一行的开始和结束，而不是值匹配整个输入字符串的最开始和最末尾处）
  * 
  */
let re_js = new RegExp('a','i')
 
//第二中写法 perl风格
/**
 * 这个风格中的匹配模式直接在后面加上就行了
 * let re_perl = /a/i
 * 正则中可以使用简单的转义 这个是写在正则里面的
 * 数字：\d
 * .：代表得是任意字符 尽量不要用
 * 量词：+ 值的是个数
 * |:在正则中表示或
 */
let re_perl = /a/
let num_re = /\d+/g //转义为数字 

 //str.match() 把所有匹配的东西 全都提取出来
 var str  = 'asdho  aoeu bsa7 bq321432gg54bb623'
 console.log(str.match(num_re))
 //str.replace(pattern，newStr) 用于替换字符串中的出现的符合正则的字符串为新字符串，注意：不适用正则的话匹配的是第一个 返回的是替换完的字符串
 //过滤字符串
 let rep_re = /背景|测试/g
let oldStr = '这就是一个背景的测试'
console.log(oldStr.replace(rep_re,'***'))

/**
 * 正则中方括号：元字符
 * [abc]指得是或得意思  意思就是abc中得三个字符随便取哪一个都行：其中任选一个即刻
 * [a-z]/[0-9]:找出所有得字母/字符串 意思就是中括号还能表示一个范围
 * [^a-z]:排除字母
 * [^a-z0-9]:这个用法是匹配除了字母和数字意外得字符
 * 
 */
let huoStr = 'amn smn dmn ddm ddn ddi bmn cmn'
let huo_re = /[abc]mn/g
console.log(huoStr.match(huo_re))
//过滤html标签得正则
let html_re = /<[^<>]+>/g
let html_str = '<div>这是一个测试html标签过滤得正则<br></div>'
console.log(html_str.replace(html_re,''))

/**
正则表达式知识整理
\ : 转义字符

^ : 匹配字符串开始位置

$ : 匹配字符串结束位置

* : 匹配前面的表达式任意次

+ : 匹配前面的表达式一次或多次

? : 匹配前面的表达式零次或一次

{n} : 匹配确定的n次，n为非负整数

{n,} : 匹配至少n次，n为非负整数

{n,m} : 匹配至少n次，至多m次，n和m均为非负整数且n<=m

(*,+,{n,m})? : 非贪婪匹配模式，尽可能少的匹配，例如“z+”可以匹配“zzzzz”，“z+?”只匹配到“z”

. : 匹配除\r\n外任何单个字符

(pattern) : 匹配pattern，并获取匹配，可以获取匹配到的结果，用\1-\9表示，例如“(o)”匹配到“o”，“(o)\1”匹配到“oo”，“(\d{3})\1”匹配到“123123”，不能匹配到“123456”

(?:pattern) : 非获取匹配，匹配pattern，但不获取匹配结果

(?=pattern) : 非获取匹配，正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用，例如“test(?=123)”能匹配“test123”中的“test”，但不能匹配“test456”中的“test”

(?!pattern) : 非获取匹配，正向否定预查，在任何匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用，例如“test(?=123)”能匹配“test456”中的“test”，但不能匹配“test123”中的“test”

(?<=pattern) : 非获取匹配，反向肯定预查，和正向肯定预查类似，方向相反，例如“(?<=123)test”能匹配“123test”中的“test”，但不能匹配“456test”中的“test”

(?<!pattern) : 非获取匹配，反向否定预查，和正向否定预查类似，方向相反，例如“(?<!123)test”能匹配“456test”中的“test”，但不能匹配“123test”中的“test”

x|y : 匹配x或y

[xyz] : 匹配包含的任意一个字符

[^xyz] : 匹配未包含的任意字符

\b : 匹配一个单词边界，例如“on\b”能匹配“location”中的“on”，不能匹配到“component”中的“on”

\B : 匹配非单词边界，例如“on\B”能匹配到“component”中的“on”，不能匹配到“location”中的“on”

\d : 匹配一个数字字符

\D : 匹配非数字字符

\s : 匹配任何不可见字符，相当于[\f\n\r\t\v]

\S : 匹配任何可见符，相当于[^\f\n\r\t\v]
 */


console.log('********************正则表达式end***************************')
